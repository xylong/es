// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"es/model"
)

func newChat_data(db *gorm.DB, opts ...gen.DOOption) chat_data {
	_chat_data := chat_data{}

	_chat_data.chat_dataDo.UseDB(db, opts...)
	_chat_data.chat_dataDo.UseModel(&model.Chat_data{})

	tableName := _chat_data.chat_dataDo.TableName()
	_chat_data.ALL = field.NewAsterisk(tableName)
	_chat_data.ID = field.NewInt64(tableName, "id")
	_chat_data.Msgid = field.NewString(tableName, "msgid")
	_chat_data.Action = field.NewString(tableName, "action")
	_chat_data.From = field.NewString(tableName, "from")
	_chat_data.Tolist = field.NewString(tableName, "tolist")
	_chat_data.Roomid = field.NewString(tableName, "roomid")
	_chat_data.Msgtime = field.NewInt64(tableName, "msgtime")
	_chat_data.Msgtype = field.NewString(tableName, "msgtype")
	_chat_data.URL = field.NewString(tableName, "url")
	_chat_data.Info = field.NewString(tableName, "info")
	_chat_data.Metadata = field.NewString(tableName, "metadata")
	_chat_data.CreatedAt = field.NewInt64(tableName, "created_at")
	_chat_data.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_chat_data.DeletedAt = field.NewInt64(tableName, "deleted_at")

	_chat_data.fillFieldMap()

	return _chat_data
}

type chat_data struct {
	chat_dataDo

	ALL       field.Asterisk
	ID        field.Int64
	Msgid     field.String // 消息id，消息的唯一标识，企业可以使用此字段进行消息去重
	Action    field.String // 消息动作，目前有send(发送消息)/recall(撤回消息)/switch(切换企业日志)三种类型
	From      field.String // 消息发送方id。同一企业内容为userid，非相同企业为external_userid。消息如果是机器人发出，也为external_userid
	Tolist    field.String // 消息接收方列表，可能是多个，同一个企业内容为userid，非相同企业为external_userid
	Roomid    field.String // 群聊消息的群id。如果是单聊则为空
	Msgtime   field.Int64  // 消息发送时间戳
	Msgtype   field.String // 文本消息为
	URL       field.String
	Info      field.String
	Metadata  field.String
	CreatedAt field.Int64
	UpdatedAt field.Int64
	DeletedAt field.Int64

	fieldMap map[string]field.Expr
}

func (c chat_data) Table(newTableName string) *chat_data {
	c.chat_dataDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c chat_data) As(alias string) *chat_data {
	c.chat_dataDo.DO = *(c.chat_dataDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *chat_data) updateTableName(table string) *chat_data {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.Msgid = field.NewString(table, "msgid")
	c.Action = field.NewString(table, "action")
	c.From = field.NewString(table, "from")
	c.Tolist = field.NewString(table, "tolist")
	c.Roomid = field.NewString(table, "roomid")
	c.Msgtime = field.NewInt64(table, "msgtime")
	c.Msgtype = field.NewString(table, "msgtype")
	c.URL = field.NewString(table, "url")
	c.Info = field.NewString(table, "info")
	c.Metadata = field.NewString(table, "metadata")
	c.CreatedAt = field.NewInt64(table, "created_at")
	c.UpdatedAt = field.NewInt64(table, "updated_at")
	c.DeletedAt = field.NewInt64(table, "deleted_at")

	c.fillFieldMap()

	return c
}

func (c *chat_data) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *chat_data) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 14)
	c.fieldMap["id"] = c.ID
	c.fieldMap["msgid"] = c.Msgid
	c.fieldMap["action"] = c.Action
	c.fieldMap["from"] = c.From
	c.fieldMap["tolist"] = c.Tolist
	c.fieldMap["roomid"] = c.Roomid
	c.fieldMap["msgtime"] = c.Msgtime
	c.fieldMap["msgtype"] = c.Msgtype
	c.fieldMap["url"] = c.URL
	c.fieldMap["info"] = c.Info
	c.fieldMap["metadata"] = c.Metadata
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
}

func (c chat_data) clone(db *gorm.DB) chat_data {
	c.chat_dataDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c chat_data) replaceDB(db *gorm.DB) chat_data {
	c.chat_dataDo.ReplaceDB(db)
	return c
}

type chat_dataDo struct{ gen.DO }

type IChat_dataDo interface {
	gen.SubQuery
	Debug() IChat_dataDo
	WithContext(ctx context.Context) IChat_dataDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IChat_dataDo
	WriteDB() IChat_dataDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IChat_dataDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IChat_dataDo
	Not(conds ...gen.Condition) IChat_dataDo
	Or(conds ...gen.Condition) IChat_dataDo
	Select(conds ...field.Expr) IChat_dataDo
	Where(conds ...gen.Condition) IChat_dataDo
	Order(conds ...field.Expr) IChat_dataDo
	Distinct(cols ...field.Expr) IChat_dataDo
	Omit(cols ...field.Expr) IChat_dataDo
	Join(table schema.Tabler, on ...field.Expr) IChat_dataDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IChat_dataDo
	RightJoin(table schema.Tabler, on ...field.Expr) IChat_dataDo
	Group(cols ...field.Expr) IChat_dataDo
	Having(conds ...gen.Condition) IChat_dataDo
	Limit(limit int) IChat_dataDo
	Offset(offset int) IChat_dataDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IChat_dataDo
	Unscoped() IChat_dataDo
	Create(values ...*model.Chat_data) error
	CreateInBatches(values []*model.Chat_data, batchSize int) error
	Save(values ...*model.Chat_data) error
	First() (*model.Chat_data, error)
	Take() (*model.Chat_data, error)
	Last() (*model.Chat_data, error)
	Find() ([]*model.Chat_data, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Chat_data, err error)
	FindInBatches(result *[]*model.Chat_data, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Chat_data) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IChat_dataDo
	Assign(attrs ...field.AssignExpr) IChat_dataDo
	Joins(fields ...field.RelationField) IChat_dataDo
	Preload(fields ...field.RelationField) IChat_dataDo
	FirstOrInit() (*model.Chat_data, error)
	FirstOrCreate() (*model.Chat_data, error)
	FindByPage(offset int, limit int) (result []*model.Chat_data, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IChat_dataDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c chat_dataDo) Debug() IChat_dataDo {
	return c.withDO(c.DO.Debug())
}

func (c chat_dataDo) WithContext(ctx context.Context) IChat_dataDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c chat_dataDo) ReadDB() IChat_dataDo {
	return c.Clauses(dbresolver.Read)
}

func (c chat_dataDo) WriteDB() IChat_dataDo {
	return c.Clauses(dbresolver.Write)
}

func (c chat_dataDo) Session(config *gorm.Session) IChat_dataDo {
	return c.withDO(c.DO.Session(config))
}

func (c chat_dataDo) Clauses(conds ...clause.Expression) IChat_dataDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c chat_dataDo) Returning(value interface{}, columns ...string) IChat_dataDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c chat_dataDo) Not(conds ...gen.Condition) IChat_dataDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c chat_dataDo) Or(conds ...gen.Condition) IChat_dataDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c chat_dataDo) Select(conds ...field.Expr) IChat_dataDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c chat_dataDo) Where(conds ...gen.Condition) IChat_dataDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c chat_dataDo) Order(conds ...field.Expr) IChat_dataDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c chat_dataDo) Distinct(cols ...field.Expr) IChat_dataDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c chat_dataDo) Omit(cols ...field.Expr) IChat_dataDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c chat_dataDo) Join(table schema.Tabler, on ...field.Expr) IChat_dataDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c chat_dataDo) LeftJoin(table schema.Tabler, on ...field.Expr) IChat_dataDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c chat_dataDo) RightJoin(table schema.Tabler, on ...field.Expr) IChat_dataDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c chat_dataDo) Group(cols ...field.Expr) IChat_dataDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c chat_dataDo) Having(conds ...gen.Condition) IChat_dataDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c chat_dataDo) Limit(limit int) IChat_dataDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c chat_dataDo) Offset(offset int) IChat_dataDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c chat_dataDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IChat_dataDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c chat_dataDo) Unscoped() IChat_dataDo {
	return c.withDO(c.DO.Unscoped())
}

func (c chat_dataDo) Create(values ...*model.Chat_data) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c chat_dataDo) CreateInBatches(values []*model.Chat_data, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c chat_dataDo) Save(values ...*model.Chat_data) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c chat_dataDo) First() (*model.Chat_data, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Chat_data), nil
	}
}

func (c chat_dataDo) Take() (*model.Chat_data, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Chat_data), nil
	}
}

func (c chat_dataDo) Last() (*model.Chat_data, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Chat_data), nil
	}
}

func (c chat_dataDo) Find() ([]*model.Chat_data, error) {
	result, err := c.DO.Find()
	return result.([]*model.Chat_data), err
}

func (c chat_dataDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Chat_data, err error) {
	buf := make([]*model.Chat_data, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c chat_dataDo) FindInBatches(result *[]*model.Chat_data, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c chat_dataDo) Attrs(attrs ...field.AssignExpr) IChat_dataDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c chat_dataDo) Assign(attrs ...field.AssignExpr) IChat_dataDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c chat_dataDo) Joins(fields ...field.RelationField) IChat_dataDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c chat_dataDo) Preload(fields ...field.RelationField) IChat_dataDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c chat_dataDo) FirstOrInit() (*model.Chat_data, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Chat_data), nil
	}
}

func (c chat_dataDo) FirstOrCreate() (*model.Chat_data, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Chat_data), nil
	}
}

func (c chat_dataDo) FindByPage(offset int, limit int) (result []*model.Chat_data, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c chat_dataDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c chat_dataDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c chat_dataDo) Delete(models ...*model.Chat_data) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *chat_dataDo) withDO(do gen.Dao) *chat_dataDo {
	c.DO = *do.(*gen.DO)
	return c
}
